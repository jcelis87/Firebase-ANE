<?xml version="1.0" encoding="UTF-8"?><apiPackage id="com.tuarua.firebase"><apiName>com.tuarua.firebase</apiName><apiDetail/><apiClassifier id="com.tuarua.firebase:ModelInterpreterANE"><apiName>ModelInterpreterANE</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="com.tuarua.firebase:ModelInterpreterANE:ModelInterpreterANE"><apiName>ModelInterpreterANE</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>options</apiItemName><apiOperationClassifier>com.tuarua.firebase.modelInterpreter:ModelOptions</apiOperationClassifier></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="com.tuarua.firebase:ModelInterpreterANE:dispose"><apiName>dispose</apiName><shortdesc> Disposes the ANE.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Disposes the ANE. </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:ModelInterpreterANE:modelInterpreter"><apiName>modelInterpreter</apiName><shortdesc>
     A Firebase interpreter for a custom model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>com.tuarua.firebase:ModelInterpreterANE</apiOperationClassifier></apiReturn><apiParam><apiItemName>options</apiItemName><apiOperationClassifier>com.tuarua.firebase.modelInterpreter:ModelOptions</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
     A Firebase interpreter for a custom model.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:ModelInterpreterANE:run"><apiName>run</apiName><shortdesc>
     Runs model inference with the given inputs and data options asynchronously.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>inputs</apiItemName><apiOperationClassifier>com.tuarua.firebase.modelInterpreter:ModelInputs</apiOperationClassifier><apiDesc>Inputs for custom model inference.
     </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiOperationClassifier>com.tuarua.firebase.modelInterpreter:ModelInputOutputOptions</apiOperationClassifier><apiDesc>Data options for the custom model specifiying input and output data types and
         dimensions.
     </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>Handler to call back on the main thread with <codeph>ModelOutputs</codeph> or error.
     </apiDesc></apiParam><apiParam><apiItemName>numPossibilities</apiItemName><apiType value="uint"/><apiDesc>The number of possibile values that may match.
     </apiDesc></apiParam><apiParam><apiItemName>maxResults</apiItemName><apiType value="int"/><apiData>5</apiData><apiDesc>The number of results to return.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Runs model inference with the given inputs and data options asynchronously. Inputs and data
     options should remain unchanged until the model inference completes.
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.tuarua.firebase:ModelInterpreterANE:isStatsCollectionEnabled:get"><apiName>isStatsCollectionEnabled</apiName><shortdesc>
     Enables stats collection in ML Kit model interpreter.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
     Enables stats collection in ML Kit model interpreter. The stats include API call counts, errors,
     API call durations, options, etc. No personally identifiable information is logged.
     
     <p>The setting is per <codeph>FirebaseApp</codeph>, and therefore per <codeph>ModelInterpreter</codeph>, and it is persistent
     across launches of the app. It means if the user uninstalls the app or clears all app data, the
     setting will be erased. The best practice is to set the flag in each initialization.</p>
     
     <p>By default the logging is enabled. You have to specifically set it to false to disable
     logging.</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:ModelInterpreterANE:modelManager:get"><apiName>modelManager</apiName><shortdesc>
     Gets the model manager for the default Firebase app.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>com.tuarua.firebase:ModelManager</apiValueClassifier></apiValueDef><apiDesc>
     Gets the model manager for the default Firebase app. The default Firebase app instance must be
     configured before calling this method; otherwise raises an exception. The
     returned model manager is thread safe. Models hosted in non-default Firebase apps are currently
     not supported.
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase:ModelManager"><apiName>ModelManager</apiName><shortdesc>
 A Firebase model manager for both local and cloud models.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 A Firebase model manager for both local and cloud models.
 </apiDesc></apiClassifierDetail><apiConstructor id="com.tuarua.firebase:ModelManager:ModelManager"><apiName>ModelManager</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="com.tuarua.firebase:ModelManager:cloudModelSource"><apiName>cloudModelSource</apiName><shortdesc>
     Gets the registered cloud model with the given name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The cloud model that was registered with the given name. Returns null if the model was
         never registered with this model manager.
     </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>Name of the cloud model.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Gets the registered cloud model with the given name. Returns <codeph>null</codeph> if the model was never
     registered with this model manager.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:ModelManager:localModelSource"><apiName>localModelSource</apiName><shortdesc>
     Gets the registered local model with the given name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The local model that was registered with the given name. Returns null if the model was
         never registered with this model manager.
     </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>Name of the local model.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Gets the registered local model with the given name. Returns <codeph>null</codeph> if the model was never
     registered with this model manager.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:ModelManager:registerCloudModel"><apiName>registerCloudModel</apiName><shortdesc>
     Registers a cloud model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Whether the registration was successful. Returns false if the given <codeph>cloudModelSource</codeph> is
         invalid or has already been registered.
     </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>cloudModelSource</apiItemName><apiOperationClassifier>com.tuarua.firebase.modelInterpreter:CloudModelSource</apiOperationClassifier><apiDesc>The cloud model source to register.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Registers a cloud model. The model name is unique to each cloud model and can only be registered
     once with a given instance of the <codeph>ModelManager</codeph>. The model name should be the same name used
     when uploading the model to the Firebase Console. It's OK to separately register a cloud model
     and a local model with the same name for a given instance of the <codeph>ModelManager</codeph>.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:ModelManager:registerLocalModel"><apiName>registerLocalModel</apiName><shortdesc>
     Registers a local model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Whether the registration was successful. Returns false if the given <codeph>localModelSource</codeph> is
         invalid or has already been registered.
     </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>localModelSource</apiItemName><apiOperationClassifier>com.tuarua.firebase.modelInterpreter:LocalModelSource</apiOperationClassifier><apiDesc>The local model source to register.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Registers a local model. The model name is unique to each local model and can only be registered
     once with a given instance of the <codeph>ModelManager</codeph>. It's OK to separately register a cloud model
     and a local model with the same name for a given instance of the <codeph>ModelManager</codeph>.
     
     </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.tuarua.firebase:ModelInterpreterError"><apiName>ModelInterpreterError</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="com.tuarua.firebase:ModelInterpreterError:ModelInterpreterError"><apiName>ModelInterpreterError</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiType value="any"/><apiData/></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="any"/><apiData>0</apiData></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage>