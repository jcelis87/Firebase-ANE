<?xml version="1.0" encoding="UTF-8"?><apiPackage id="com.tuarua.firebase.storage"><apiName>com.tuarua.firebase.storage</apiName><apiDetail/><apiClassifier id="com.tuarua.firebase.storage:StorageMetadata"><apiName>StorageMetadata</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiValue id="com.tuarua.firebase.storage:StorageMetadata:bucket"><apiName>bucket</apiName><shortdesc> The name of the bucket containing this object.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> The name of the bucket containing this object.</apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageMetadata:cacheControl"><apiName>cacheControl</apiName><shortdesc> Cache-Control directive for the object data.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> Cache-Control directive for the object data.</apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageMetadata:contentDisposition"><apiName>contentDisposition</apiName><shortdesc> Content-Disposition of the object data.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> Content-Disposition of the object data.</apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageMetadata:contentEncoding"><apiName>contentEncoding</apiName><shortdesc> Content-Encoding of the object data.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> Content-Encoding of the object data.</apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageMetadata:contentLanguage"><apiName>contentLanguage</apiName><shortdesc> Content-Language of the object data.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> Content-Language of the object data.</apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageMetadata:contentType"><apiName>contentType</apiName><shortdesc> Content-Type of the object data.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> Content-Type of the object data.</apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageMetadata:creationTime"><apiName>creationTime</apiName><shortdesc> The creation time of the object.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> The creation time of the object.</apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageMetadata:customMetadata"><apiName>customMetadata</apiName><shortdesc> User-provided metadata, in key/value pairs.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc> User-provided metadata, in key/value pairs.</apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageMetadata:generation"><apiName>generation</apiName><shortdesc> The content generation of this object.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> The content generation of this object. Used for object versioning. </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageMetadata:md5Hash"><apiName>md5Hash</apiName><shortdesc> MD5 hash of the data; encoded using base64.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> MD5 hash of the data; encoded using base64.</apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageMetadata:metadataGeneration"><apiName>metadataGeneration</apiName><shortdesc>
     The version of the metadata for this object at this generation.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
     The version of the metadata for this object at this generation. Used
     for preconditions and for detecting changes in metadata. A metageneration number is only
     meaningful in the context of a particular generation of a particular object.
     </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageMetadata:name"><apiName>name</apiName><shortdesc> The name of this object, in gs://bucket/path/to/object.txt, this is object.txt.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> The name of this object, in gs://bucket/path/to/object.txt, this is object.txt.</apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageMetadata:path"><apiName>path</apiName><shortdesc> The full path of this object, in gs://bucket/path/to/object.txt, this is path/to/object.txt.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> The full path of this object, in gs://bucket/path/to/object.txt, this is path/to/object.txt.</apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageMetadata:size"><apiName>size</apiName><shortdesc> Content-Length of the data in bytes.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> Content-Length of the data in bytes.</apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageMetadata:updatedTime"><apiName>updatedTime</apiName><shortdesc> The modification time of the object metadata.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> The modification time of the object metadata.</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase.storage:UploadTask"><apiName>UploadTask</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>com.tuarua.firebase.storage:StorageTask</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="com.tuarua.firebase.storage:StorageReference"><apiName>StorageReference</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="com.tuarua.firebase.storage:StorageReference:StorageReference"><apiName>StorageReference</apiName><shortdesc>
     Creates a StorageReference initialized at a child Firebase Storage location.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>path</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>A relative path from the root to initialize the reference with
     </apiDesc></apiParam><apiParam><apiItemName>url</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>A gs:// or https:// URL to initialize the reference with.
     </apiDesc></apiParam><apiParam><apiItemName>bucket</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>    </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>    </apiDesc></apiParam><apiParam><apiItemName>isRoot</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>    </apiDesc></apiParam></apiConstructorDef><apiDesc>
     Creates a StorageReference initialized at a child Firebase Storage location.
     for instance "path/to/object".
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.tuarua.firebase.storage:StorageReference:child"><apiName>child</apiName><shortdesc>
     Creates a new StorageReference pointing to a child object of the current reference.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A new StorageReference pointing to a child location of the current reference.
     </apiDesc><apiOperationClassifier>com.tuarua.firebase.storage:StorageReference</apiOperationClassifier></apiReturn><apiParam><apiItemName>path</apiItemName><apiType value="String"/><apiDesc>Path to append to the current path.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Creates a new StorageReference pointing to a child object of the current reference.
       path = foo      child = bar    newPath = foo/bar
       path = foo/bar  child = baz    newPath = foo/bar/baz
     All leading and trailing slashes will be removed, and consecutive slashes will be
     compressed to single slashes. For example:
       child = /foo/bar     newPath = foo/bar
       child = foo/bar/     newPath = foo/bar
       child = foo///bar    newPath = foo/bar
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.storage:StorageReference:downloadUrl"><apiName>downloadUrl</apiName><shortdesc>
     Asynchronously retrieves a long lived download URL with a revokable token.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>Function to be called on completion.
     The function is expected to have the following signature:
     <codeblock rev="3.0">
     function callback(url:String, error:StorageError):void {
     
     }
     </codeblock>
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Asynchronously retrieves a long lived download URL with a revokable token.
     This can be used to share the file with others, but can be revoked by a developer
     in the Firebase Console if desired.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.storage:StorageReference:getData"><apiName>getData</apiName><shortdesc>
     Asynchronously downloads the object at the StorageReference to a ByteArray in memory.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A DownloadTask that can be used to monitor or manage the download.
     </apiDesc><apiOperationClassifier>com.tuarua.firebase.storage:DownloadTask</apiOperationClassifier></apiReturn><apiParam><apiItemName>maxDownloadSizeBytes</apiItemName><apiType value="Number"/><apiData>-1</apiData><apiDesc>The maximum size in bytes to download. If the download exceeds this size
     the task will be cancelled and an error will be returned.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Asynchronously downloads the object at the StorageReference to a ByteArray in memory.
     A ByteArray of the provided max size will be allocated, so ensure that the device has enough free
     memory to complete the download. For downloading large files, getFile may be a better option.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.storage:StorageReference:getMetadata"><apiName>getMetadata</apiName><shortdesc>
     Retrieves metadata associated with an object at the current path.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>Function to be called on completion.
     The function is expected to have the following signature:
     <codeblock rev="3.0">
     function callback(metadata:StorageMetadata, error:StorageError):void {
     
     }
     </codeblock>
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Retrieves metadata associated with an object at the current path.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.storage:StorageReference:putData"><apiName>putData</apiName><shortdesc>
     Asynchronously uploads data to the currently specified FIRStorageReference.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An instance of UploadTask, which can be used to monitor or manage the upload.
     </apiDesc><apiOperationClassifier>com.tuarua.firebase.storage:UploadTask</apiOperationClassifier></apiReturn><apiParam><apiItemName>byteArray</apiItemName><apiType value="flash.utils:ByteArray"/><apiDesc>The ByteArray to upload.
     </apiDesc></apiParam><apiParam><apiItemName>metadata</apiItemName><apiOperationClassifier>com.tuarua.firebase.storage:StorageMetadata</apiOperationClassifier><apiData>null</apiData><apiDesc>Optional StorageMetadata containing additional information (MIME type, etc.)
     about the object being uploaded.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Asynchronously uploads data to the currently specified FIRStorageReference.
     This is not recommended for large files, and one should instead upload a file from disk.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.storage:StorageReference:putFile"><apiName>putFile</apiName><shortdesc>
     Asynchronously uploads a file to the currently specified FIRStorageReference.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An instance of UploadTask, which can be used to monitor or manage the upload.
     </apiDesc><apiOperationClassifier>com.tuarua.firebase.storage:UploadTask</apiOperationClassifier></apiReturn><apiParam><apiItemName>file</apiItemName><apiType value="flash.filesystem:File"/><apiDesc>A File to be uploaded.
     </apiDesc></apiParam><apiParam><apiItemName>metadata</apiItemName><apiOperationClassifier>com.tuarua.firebase.storage:StorageMetadata</apiOperationClassifier><apiData>null</apiData><apiDesc>Optional StorageMetadata containing additional information (MIME type, etc.)
     about the object being uploaded.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Asynchronously uploads a file to the currently specified FIRStorageReference.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.storage:StorageReference:remove"><apiName>remove</apiName><shortdesc>
     Deletes the object at the current path.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Optional
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Deletes the object at the current path.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.storage:StorageReference:updateMetadata"><apiName>updateMetadata</apiName><shortdesc>
     Updates the metadata associated with an object at the current path.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>metadata</apiItemName><apiOperationClassifier>com.tuarua.firebase.storage:StorageMetadata</apiOperationClassifier><apiDesc>An StorageMetadata object with the metadata to update.
     </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Optional Function to be called on completion.
     The function is expected to have the following signature:
     <codeblock rev="3.0">
     function callback(error:StorageError):void {
     
     }
     </codeblock>
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Updates the metadata associated with an object at the current path.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.storage:StorageReference:write"><apiName>write</apiName><shortdesc>
     Asynchronously downloads the object at the current path to a specified system filepath.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An DownloadTask that can be used to monitor or manage the download.
     </apiDesc><apiOperationClassifier>com.tuarua.firebase.storage:DownloadTask</apiOperationClassifier></apiReturn><apiParam><apiItemName>toFile</apiItemName><apiType value="flash.filesystem:File"/><apiDesc>A File representing the path the object should be downloaded to.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Asynchronously downloads the object at the current path to a specified system filepath.
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.tuarua.firebase.storage:StorageReference:bucket:get"><apiName>bucket</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageReference:name:get"><apiName>name</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageReference:parent:get"><apiName>parent</apiName><shortdesc>
     Creates a new StorageReference pointing to the parent of the current reference
     or nil if this instance references the root location.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.tuarua.firebase.storage:StorageReference</apiValueClassifier></apiValueDef><apiDesc>
     Creates a new StorageReference pointing to the parent of the current reference
     or nil if this instance references the root location.
     For example:
       path = foo/bar/baz   parent = foo/bar
       path = foo           parent = (root)
       path = (root)        parent = nil
     </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageReference:path:get"><apiName>path</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageReference:root:get"><apiName>root</apiName><shortdesc>
     Creates a new StorageReference pointing to the root object.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.tuarua.firebase.storage:StorageReference</apiValueClassifier></apiValueDef><apiDesc>
     Creates a new StorageReference pointing to the root object.
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase.storage:StorageTask"><apiName>StorageTask</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="com.tuarua.firebase.storage:StorageTask:addEventListener"><apiName>addEventListener</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.storage:StorageTask:cancel"><apiName>cancel</apiName><shortdesc>
     Cancels a task currently in progress.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     Cancels a task currently in progress.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.storage:StorageTask:pause"><apiName>pause</apiName><shortdesc>
     Pauses a task currently in progress.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     Pauses a task currently in progress.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.storage:StorageTask:removeEventListener"><apiName>removeEventListener</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.storage:StorageTask:resume"><apiName>resume</apiName><shortdesc>
     Resumes a task that is paused.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     Resumes a task that is paused.
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.tuarua.firebase.storage:StorageTask:protected:_asId"><apiName>_asId</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageTask:protected:_referenceId"><apiName>_referenceId</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase.storage:StorageError"><apiName>StorageError</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="com.tuarua.firebase.storage:StorageError:StorageError"><apiName>StorageError</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiType value="any"/><apiData/></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="any"/><apiData>0</apiData></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="com.tuarua.firebase.storage:DownloadTask"><apiName>DownloadTask</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>com.tuarua.firebase.storage:StorageTask</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="com.tuarua.firebase.storage:StorageErrorCode"><apiName>StorageErrorCode</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiValue id="com.tuarua.firebase.storage:StorageErrorCode:BUCKET_NOT_FOUND"><apiName>BUCKET_NOT_FOUND</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-13011</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageErrorCode:CANCELED"><apiName>CANCELED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-13040</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageErrorCode:INVALID_CHECKSUM"><apiName>INVALID_CHECKSUM</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-13031</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageErrorCode:NOT_AUTHENTICATED"><apiName>NOT_AUTHENTICATED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-13020</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageErrorCode:NOT_AUTHORIZED"><apiName>NOT_AUTHORIZED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-13021</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageErrorCode:OBJECT_NOT_FOUND"><apiName>OBJECT_NOT_FOUND</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-13010</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageErrorCode:PROJECT_NOT_FOUND"><apiName>PROJECT_NOT_FOUND</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-13012</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageErrorCode:QUOTA_EXCEEDED"><apiName>QUOTA_EXCEEDED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-13013</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageErrorCode:RETRY_LIMIT_EXCEEDED"><apiName>RETRY_LIMIT_EXCEEDED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-13030</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.storage:StorageErrorCode:UNKNOWN"><apiName>UNKNOWN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-13000</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage>